name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Lint with flake8
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type check with mypy
      run: |
        mypy src/ --ignore-missing-imports || true

    - name: Test with pytest
      env:
        BOT_TOKEN: ${{ secrets.TEST_BOT_TOKEN || '1234567890:AAHdqTcvCH1vGWJxfSeofSAs0K5PALDsaw' }}
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing --tb=short

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  integration-tests:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Run integration tests
      env:
        BOT_TOKEN: ${{ secrets.TEST_BOT_TOKEN || '1234567890:AAHdqTcvCH1vGWJxfSeofSAs0K5PALDsaw' }}
        WEBHOOK_URL: https://example.com/webhook
      run: |
        pytest tests/integration/ -v -m integration --tb=short

    - name: Run smoke tests
      env:
        BOT_TOKEN: ${{ secrets.TEST_BOT_TOKEN || '1234567890:AAHdqTcvCH1vGWJxfSeofSAs0K5PALDsaw' }}
      run: |
        pytest tests/ -v -m smoke --tb=short

  performance-tests:
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Run performance tests
      env:
        BOT_TOKEN: 1234567890:AAHdqTcvCH1vGWJxfSeofSAs0K5PALDsaw
      run: |
        pytest tests/performance/ -v -m "performance and not slow" --tb=short

  quality-gate:
    runs-on: ubuntu-latest
    needs: [test, integration-tests]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Quality checks
      run: |
        # Code formatting check
        black --check src/ tests/
        
        # Import sorting check
        isort --check-only src/ tests/
        
        # Pylint check
        pylint src/ --exit-zero --score=yes --reports=yes

    - name: Security baseline
      run: |
        # Quick security check
        bandit -r src/ -ll
        safety check --short-report

    - name: Test coverage check
      env:
        BOT_TOKEN: 1234567890:AAHdqTcvCH1vGWJxfSeofSAs0K5PALDsaw
      run: |
        pytest tests/ --cov=src --cov-fail-under=80

    - name: Generate test report
      if: always()
      run: |
        pytest tests/ --html=test-report.html --self-contained-html

    - name: Upload test report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-report
        path: test-report.html

  build:
    runs-on: ubuntu-latest
    needs: quality-gate
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Build package
      run: |
        python -m pip install --upgrade pip build
        python -m build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/