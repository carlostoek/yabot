name: Security Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Run weekly on Monday at 2 AM

jobs:
  security-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Run security-focused unit tests
      run: |
        pytest tests/security/ -v -m security --cov=src --cov-report=xml --cov-report=term-missing

    - name: Run dependency vulnerability scan
      run: |
        safety check --json --output safety-report.json || true
        
    - name: Run static security analysis with Bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Run SAST with Semgrep
      run: |
        semgrep --config=auto src/ --json --output=semgrep-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports-${{ matrix.python-version }}
        path: |
          safety-report.json
          bandit-report.json
          semgrep-report.json
          coverage.xml

    - name: Comment PR with security results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          let comment = '## ðŸ”’ Security Test Results\n\n';
          
          try {
            const banditReport = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
            const highIssues = banditReport.results.filter(r => r.issue_severity === 'HIGH').length;
            const mediumIssues = banditReport.results.filter(r => r.issue_severity === 'MEDIUM').length;
            
            comment += `**Bandit Static Analysis:**\n`;
            comment += `- High severity issues: ${highIssues}\n`;
            comment += `- Medium severity issues: ${mediumIssues}\n\n`;
          } catch (e) {
            comment += '**Bandit Static Analysis:** Report not available\n\n';
          }
          
          try {
            const safetyReport = JSON.parse(fs.readFileSync('safety-report.json', 'utf8'));
            const vulnCount = safetyReport.length;
            
            comment += `**Safety Dependency Scan:**\n`;
            comment += `- Vulnerabilities found: ${vulnCount}\n\n`;
          } catch (e) {
            comment += '**Safety Dependency Scan:** No vulnerabilities found or report not available\n\n';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  integration-security-tests:
    runs-on: ubuntu-latest
    needs: security-tests

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Run integration security tests
      env:
        BOT_TOKEN: ${{ secrets.TEST_BOT_TOKEN || '1234567890:AAHdqTcvCH1vGWJxfSeofSAs0K5PALDsaw' }}
        WEBHOOK_URL: https://example.com/webhook
      run: |
        pytest tests/integration/ -v -m security --tb=short

    - name: Run load tests with security focus
      env:
        BOT_TOKEN: ${{ secrets.TEST_BOT_TOKEN || '1234567890:AAHdqTcvCH1vGWJxfSeofSAs0K5PALDsaw' }}
      run: |
        pytest tests/performance/ -v -m performance --tb=short -k "security or rate_limit"

  security-benchmarks:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Run security benchmarks
      env:
        BOT_TOKEN: 1234567890:AAHdqTcvCH1vGWJxfSeofSAs0K5PALDsaw
      run: |
        pytest tests/performance/ -v -m benchmark --benchmark-json=benchmark-results.json

    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      if: github.ref == 'refs/heads/main'
      with:
        tool: 'pytest'
        output-file-path: benchmark-results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  security-audit:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'  # Only run on scheduled builds

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Comprehensive security audit
      run: |
        # Run all security tests
        pytest tests/security/ -v --tb=long
        
        # Generate detailed security reports
        bandit -r src/ -f txt -o security-audit-bandit.txt
        safety check --full-report > security-audit-safety.txt
        
        # Check for secrets
        pip install truffleHog
        truffleHog --regex --entropy=False . > security-audit-secrets.txt || true

    - name: Upload comprehensive audit results
      uses: actions/upload-artifact@v3
      with:
        name: security-audit-results
        path: |
          security-audit-*.txt

    - name: Create security audit issue
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'ðŸš¨ Weekly Security Audit Failed',
            body: `The weekly security audit has detected issues. Please review the audit results and take appropriate action.\n\nWorkflow run: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
            labels: ['security', 'urgent']
          });