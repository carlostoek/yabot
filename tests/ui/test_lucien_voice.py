
"""
Unit tests for the Lucien Voice Generation System.

These tests validate the consistency, formality, and adaptability of Lucien's voice
as generated by the lucien_voice_generator module, ensuring it adheres to the
defined psychological profile and design specifications.
"""

import pytest
from src.ui.lucien_voice_generator import (
    generate_lucien_response,
    LucienVoiceProfile,
    RelationshipLevel,
    ArchetypeAdaptation
)

def test_lucien_voice_maintains_formality():
    """
    Validates that Lucien's responses consistently use the formal 'usted' address
    and avoid informalities.
    """
    # Arrange
    profile = LucienVoiceProfile()
    context = {"user_archetype": "explorer"}

    # Act
    response = generate_lucien_response(profile, "/start", context)

    # Assert
    assert "usted" in response.response_text
    assert "tú" not in response.response_text
    assert "vos" not in response.response_text

def test_lucien_response_varies_by_relationship_level():
    """
    Ensures that Lucien's responses are different for different relationship levels,
    even with the same user action.
    """
    # Arrange
    profile_examiner = LucienVoiceProfile(user_relationship_level=RelationshipLevel.FORMAL_EXAMINER)
    profile_confidant = LucienVoiceProfile(user_relationship_level=RelationshipLevel.TRUSTED_CONFIDANT)
    context = {}

    # Act
    response_examiner = generate_lucien_response(profile_examiner, "/start", context)
    response_confidant = generate_lucien_response(profile_confidant, "/start", context)

    # Assert
    assert response_examiner.response_text != response_confidant.response_text
    assert "evaluar si usted posee la sofisticación" in response_examiner.response_text
    assert "Es un placer genuine continuar nuestro diálogo" in response_confidant.response_text

def test_lucien_adapts_to_user_archetype():
    """
    Verifies that the voice generator correctly adapts its response and internal state
    to the user's archetype provided in the context.
    """
    # Arrange
    profile = LucienVoiceProfile()
    context_analytical = {"user_archetype": "analytical"}
    context_direct = {"user_archetype": "direct"}

    # Act
    response_analytical = generate_lucien_response(profile, "Some user input", context_analytical)
    response_direct = generate_lucien_response(profile, "Another user input", context_direct)

    # Assert
    assert response_analytical.archetype_adaptation_applied == ArchetypeAdaptation.ANALYTICAL_SPARRING
    assert "Su inclinación analítica es prometedora" in response_analytical.response_text

    assert response_direct.archetype_adaptation_applied == ArchetypeAdaptation.DIRECT_APPRECIATION
    assert "Aprecio su franqueza" in response_direct.response_text

def test_lucien_voice_avoids_informal_slang():
    """
    A negative test to ensure common informal slang is not present in Lucien's
    sophisticated responses.
    """
    # Arrange
    profile = LucienVoiceProfile()
    context = {}
    informal_words = ["chevere", "bacán", "guay", "chido", "pana"]

    # Act
    response = generate_lucien_response(profile, "/menu", context)

    # Assert
    for word in informal_words:
        assert word not in response.response_text.lower()

def test_lucien_handles_unknown_commands_gracefully():
    """
    Tests that Lucien provides a sophisticated, in-character response for
    unrecognized commands instead of crashing or giving a generic error.
    """
    # Arrange
    profile = LucienVoiceProfile()
    context = {}

    # Act
    response = generate_lucien_response(profile, "/unknown_command", context)

    # Assert
    assert "reveladora" in response.response_text or "Interesante" in response.response_text
    assert "clarificación" in response.response_text
